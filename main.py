#!/usr/bin/env python3
"""
TESTE DE HIP√ìTESES DE F√çSICA TE√ìRICA
√âpoca de Planck com Leis Din√¢micas e Universo TARDIS

Arquivo principal para executar as simula√ß√µes validadas.
Utilize este arquivo como ponto de entrada principal do projeto.

Autor: Sistema de Simula√ß√£o de F√≠sica Te√≥rica
Data: Agosto 2025
"""

import sys
import os

# Adicionar pasta src ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def main():
    """Fun√ß√£o principal - executa simula√ß√£o V3.0 avan√ßada baseada em m√©todos num√©ricos"""

    print("=" * 80)
    print("SISTEMA AVAN√áADO DE F√çSICA TE√ìRICA V3.0")
    print("Simula√ß√£o Computacional com M√©todos Num√©ricos Avan√ßados")
    print("=" * 80)
    print()
    print("üî¨ Hip√≥teses testadas:")
    print("1. Leis f√≠sicas din√¢micas durante eventos supercosmicos")
    print("2. Universo TARDIS: compress√£o qu√¢ntica espa√ßo-temporal")
    print()
    print("üöÄ Executando simula√ß√£o V3.0 com:")
    print("   ‚Ä¢ M√∫ltiplos m√©todos num√©ricos (Runge-Kutta, diferen√ßas finitas)")
    print("   ‚Ä¢ Valida√ß√£o rigorosa e benchmarking")
    print("   ‚Ä¢ Estrutura modular e bem documentada")
    print("   ‚Ä¢ Integra√ß√£o com bibliotecas cient√≠ficas")
    print()

    try:
        # Importar e executar simulador V3.0
        from main_physics_test_v2 import PhysicsTestSystemV3

        system = PhysicsTestSystemV3()
        results = system.run_complete_simulation()

        if results.get('simulation_success', False):
            print("\n" + "=" * 80)
            print("‚úÖ SIMULA√á√ÉO V3.0 CONCLU√çDA COM SUCESSO!")
            print("=" * 80)
            print()
            print("üìä RESULTADOS PRINCIPAIS:")
            print(f"   ‚Ä¢ Pontos simulados: {results['total_points']}")
            print(f"   ‚Ä¢ Range temporal: {results['time_range'][0]:.0e} - {results['time_range'][1]:.0e}")
            print(f"   ‚Ä¢ Compress√£o final: {results['final_compression_factor']:.1f}x")
            print(".1%")
            print(f"   ‚Ä¢ Valida√ß√µes: {sum(results['validation_status'].values())}/{len(results['validation_status'])} ‚úÖ")
            print()
            print("üìÅ Arquivos gerados:")
            print(f"   ‚Ä¢ Resultados: {results['result_file']}")
            print(f"   ‚Ä¢ Visualiza√ß√µes: {results['visualization_file']}")
            print()
            print("üî¨ NOVOS RECURSOS V3.0:")
            print("   ‚Ä¢ Mec√¢nica qu√¢ntica com diferen√ßas finitas")
            print("   ‚Ä¢ Simula√ß√µes Monte Carlo")
            print("   ‚Ä¢ Benchmarking de m√©todos num√©ricos")
            print("   ‚Ä¢ Valida√ß√£o rigorosa com m√©tricas f√≠sicas")
            print()
            print("üìñ Consulte README.md para documenta√ß√£o completa")

        else:
            print("‚ùå Simula√ß√£o falhou. Verifique os logs acima.")
            error_msg = results.get('error', 'Erro desconhecido')
            print(f"Detalhes: {error_msg}")
            return 1

    except ImportError as e:
        print(f"‚ùå Erro ao importar m√≥dulos: {e}")
        print("Certifique-se de que todos os arquivos est√£o na pasta 'src/'")
        print("Execute: pip install -r requirements.txt")
        return 1
    except Exception as e:
        print(f"‚ùå Erro durante execu√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return 1

    return 0

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
