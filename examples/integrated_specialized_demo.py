#!/usr/bin/env python3
"""
DEMONSTRA√á√ÉO INTEGRADA DOS M√ìDULOS ESPECIALIZADOS
Sistema de F√≠sica Te√≥rica V3.0

Este exemplo demonstra como usar todas as bibliotecas especializadas
integradas no sistema V3.0 para resolver problemas complexos de f√≠sica.
"""

import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime
import sys
import os

# Adicionar src ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

def demo_quantum_chemistry_cosmology():
    """
    Demonstra√ß√£o integrada: Qu√¢ntica + Cosmologia
    Como constantes f√≠sicas din√¢micas afetam estrutura at√¥mica
    """
    print("üî¨ DEMONSTRA√á√ÉO INTEGRADA: QU√çMICA QU√ÇNTICA + COSMOLOGIA")
    print("=" * 70)

    try:
        from physics_specialized_modules import SpecializedPhysicsModules

        physics = SpecializedPhysicsModules()

        # 1. Calcular energias at√¥micas com constantes f√≠sicas atuais
        print("‚öõÔ∏è Calculando energias at√¥micas do hidrog√™nio...")
        h_energy_current = physics.chemistry.calculate_atomic_energies(1)

        # 2. Simular efeito de constantes din√¢micas nas energias at√¥micas
        print("üåå Simulando efeito de constantes din√¢micas...")

        # Varia√ß√µes baseadas nos resultados do sistema V3.0
        G_variations = np.linspace(0.743, 1.257, 10)  # ¬±25.7%
        alpha_variations = np.linspace(0.835, 1.165, 10)  # ¬±16.5%

        energies_with_variations = []

        for i, (G_var, alpha_var) in enumerate(zip(G_variations, alpha_variations)):
            # A energia at√¥mica depende de constantes f√≠sicas
            # E ‚àù (m_e * Œ±¬≤ * c¬≤) onde m_e √© afetado por G
            energy_factor = G_var * (alpha_var ** 2)
            modified_energy = h_energy_current['total_energy'] * energy_factor
            energies_with_variations.append(modified_energy)

        # 3. Calcular dist√¢ncias cosmol√≥gicas onde essas varia√ß√µes ocorrem
        print("üåå Calculando contexto cosmol√≥gico...")
        redshifts = np.array([0.1, 0.5, 1.0, 2.0, 5.0])
        cosmological_context = physics.astrophysics.calculate_cosmological_distances(redshifts)

        # 4. Criar visualiza√ß√£o integrada
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))
        fig.suptitle('Demonstra√ß√£o Integrada: F√≠sica At√¥mica + Cosmologia', fontsize=16)

        # Gr√°fico 1: Energias at√¥micas vs varia√ß√µes de constantes
        ax1.plot(G_variations, energies_with_variations, 'bo-', linewidth=2, markersize=8)
        ax1.set_xlabel('Varia√ß√£o da Constante Gravitacional G')
        ax1.set_ylabel('Energia At√¥mica do Hidrog√™nio (a.u.)')
        ax1.set_title('Efeito das Constantes Din√¢micas na Estrutura At√¥mica')
        ax1.grid(True, alpha=0.3)
        ax1.axvline(x=1.0, color='red', linestyle='--', alpha=0.7, label='Valor Atual')
        ax1.legend()

        # Gr√°fico 2: Contexto cosmol√≥gico
        ax2.plot(redshifts, cosmological_context['luminosity_distance'], 'go-', linewidth=2)
        ax2.set_xlabel('Redshift (z)')
        ax2.set_ylabel(f'Dist√¢ncia Luminosa ({cosmological_context["units"]})')
        ax2.set_title('Contexto Cosmol√≥gico das Varia√ß√µes')
        ax2.grid(True, alpha=0.3)
        ax2.set_xscale('log')

        # Gr√°fico 3: Rela√ß√£o energia-dist√¢ncia
        # Simular como varia√ß√µes de energia se relacionam com dist√¢ncias cosmol√≥gicas
        energy_at_distances = np.interp(redshifts, np.linspace(0, 5, len(energies_with_variations)),
                                      energies_with_variations)
        ax3.plot(cosmological_context['luminosity_distance'], energy_at_distances,
                'ro-', linewidth=2, markersize=8)
        ax3.set_xlabel(f'Dist√¢ncia Luminosa ({cosmological_context["units"]})')
        ax3.set_ylabel('Energia At√¥mica Modificada (a.u.)')
        ax3.set_title('Correla√ß√£o Energia-Dist√¢ncia Cosmol√≥gica')
        ax3.grid(True, alpha=0.3)

        # Gr√°fico 4: An√°lise estat√≠stica das varia√ß√µes
        variation_data = np.array(energies_with_variations) / h_energy_current['total_energy']
        ax4.hist(variation_data - 1, bins=10, alpha=0.7, color='purple', edgecolor='black')
        ax4.axvline(x=0, color='red', linestyle='--', linewidth=2, label='Valor Atual')
        ax4.set_xlabel('Varia√ß√£o Relativa da Energia (%)')
        ax4.set_ylabel('Frequ√™ncia')
        ax4.set_title('Distribui√ß√£o das Varia√ß√µes de Energia')
        ax4.legend()
        ax4.grid(True, alpha=0.3)

        plt.tight_layout()
        plt.savefig('resultados/integrated_quantum_cosmology_demo.png', dpi=300, bbox_inches='tight')
        plt.close()

        print("‚úÖ Demonstra√ß√£o integrada conclu√≠da!")
        print("üìä Resultados salvos em: resultados/integrated_quantum_cosmology_demo.png")

        return {
            'atomic_energies': h_energy_current,
            'energy_variations': energies_with_variations,
            'cosmological_distances': cosmological_context,
            'redshifts': redshifts
        }

    except Exception as e:
        print(f"‚ùå Erro na demonstra√ß√£o integrada: {e}")
        import traceback
        traceback.print_exc()
        return None


def demo_quantum_mechanics_gravitational():
    """
    Demonstra√ß√£o integrada: Mec√¢nica Qu√¢ntica + Gravita√ß√£o
    Como efeitos qu√¢nticos interagem com campos gravitacionais din√¢micos
    """
    print("\nüåÄ DEMONSTRA√á√ÉO INTEGRADA: MEC√ÇNICA QU√ÇNTICA + GRAVITA√á√ÉO")
    print("=" * 70)

    try:
        from physics_specialized_modules import SpecializedPhysicsModules

        physics = SpecializedPhysicsModules()

        # 1. Criar sistema qu√¢ntico (oscilador harm√¥nico)
        print("‚öõÔ∏è Criando sistema qu√¢ntico...")
        H_quantum = physics.quantum.create_quantum_harmonic_oscillator(n_levels=10)

        if H_quantum is not None:
            print("‚úÖ Oscilador harm√¥nico qu√¢ntico criado com QuTiP")
        else:
            print("‚ö†Ô∏è Usando implementa√ß√£o de fallback")

        # 2. Simular efeitos gravitacionais din√¢micos
        print("üåç Simulando efeitos gravitacionais din√¢micos...")

        # Par√¢metros baseados nos resultados do sistema V3.0
        times = np.linspace(0, 1000, 1000)  # Unidades de tempo de Planck
        G_variations = 1 + 0.257 * np.sin(times / 100) * np.exp(-times / 2000)
        c_variations = 1 + 0.236 * np.cos(times / 150) * np.exp(-times / 2500)

        # 3. Calcular efeitos combinados no sistema qu√¢ntico
        # A frequ√™ncia do oscilador depende de sqrt(k/m), onde k ‚àù G
        base_frequency = 1.0  # Frequ√™ncia reduzida
        modified_frequencies = base_frequency * np.sqrt(G_variations)

        # A energia dos n√≠veis qu√¢nticos: E_n = ƒßœâ(n + 1/2), onde œâ ‚àù sqrt(G)
        energy_levels = []
        for n in range(5):  # Primeiros 5 n√≠veis
            energies_n = modified_frequencies * (n + 0.5)
            energy_levels.append(energies_n)

        # 4. Criar visualiza√ß√£o
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))
        fig.suptitle('Demonstra√ß√£o Integrada: Mec√¢nica Qu√¢ntica + Gravita√ß√£o Din√¢mica', fontsize=16)

        # Gr√°fico 1: Varia√ß√µes das constantes fundamentais
        ax1.plot(times, G_variations, 'b-', linewidth=2, label='G (Gravitacional)', alpha=0.8)
        ax1.plot(times, c_variations, 'r-', linewidth=2, label='c (Velocidade da Luz)', alpha=0.8)
        ax1.set_xlabel('Tempo (unidades Planck)')
        ax1.set_ylabel('Varia√ß√£o Relativa')
        ax1.set_title('Constantes F√≠sicas Din√¢micas')
        ax1.legend()
        ax1.grid(True, alpha=0.3)

        # Gr√°fico 2: Frequ√™ncias modificadas
        ax2.plot(times, modified_frequencies, 'g-', linewidth=2)
        ax2.set_xlabel('Tempo (unidades Planck)')
        ax2.set_ylabel('Frequ√™ncia do Oscilador')
        ax2.set_title('Frequ√™ncia do Oscilador Harm√¥nico Modificada')
        ax2.grid(True, alpha=0.3)

        # Gr√°fico 3: N√≠veis de energia qu√¢ntica
        colors = ['blue', 'red', 'green', 'orange', 'purple']
        for n, energies in enumerate(energy_levels):
            ax3.plot(times, energies, color=colors[n], linewidth=2,
                    label=f'N√≠vel n={n}', alpha=0.8)
        ax3.set_xlabel('Tempo (unidades Planck)')
        ax3.set_ylabel('Energia (unidades reduzidas)')
        ax3.set_title('N√≠veis de Energia Qu√¢ntica com Gravita√ß√£o Din√¢mica')
        ax3.legend()
        ax3.grid(True, alpha=0.3)

        # Gr√°fico 4: Diferen√ßas de energia entre n√≠veis
        for n in range(1, len(energy_levels)):
            energy_diff = energy_levels[n] - energy_levels[n-1]
            ax4.plot(times, energy_diff, color=colors[n], linewidth=2,
                    label=f'ŒîE (n={n-1}‚Üí{n})', alpha=0.8)
        ax4.set_xlabel('Tempo (unidades Planck)')
        ax4.set_ylabel('Diferen√ßa de Energia')
        ax4.set_title('Transi√ß√µes Qu√¢nticas Modificadas')
        ax4.legend()
        ax4.grid(True, alpha=0.3)

        plt.tight_layout()
        plt.savefig('resultados/integrated_quantum_gravitational_demo.png', dpi=300, bbox_inches='tight')
        plt.close()

        print("‚úÖ Demonstra√ß√£o integrada conclu√≠da!")
        print("üìä Resultados salvos em: resultados/integrated_quantum_gravitational_demo.png")

        return {
            'times': times,
            'G_variations': G_variations,
            'c_variations': c_variations,
            'modified_frequencies': modified_frequencies,
            'energy_levels': energy_levels
        }

    except Exception as e:
        print(f"‚ùå Erro na demonstra√ß√£o integrada: {e}")
        import traceback
        traceback.print_exc()
        return None


def demo_astrophysical_chemistry():
    """
    Demonstra√ß√£o integrada: Astrof√≠sica + Qu√≠mica Qu√¢ntica
    Como condi√ß√µes astrof√≠sicas afetam qu√≠mica molecular
    """
    print("\nüåå DEMONSTRA√á√ÉO INTEGRADA: ASTROF√çSICA + QU√çMICA QU√ÇNTICA")
    print("=" * 70)

    try:
        from physics_specialized_modules import SpecializedPhysicsModules

        physics = SpecializedPhysicsModules()

        # 1. Calcular dist√¢ncias cosmol√≥gicas
        print("üåå Calculando dist√¢ncias cosmol√≥gicas...")
        redshifts = np.logspace(-1, 2, 50)  # z de 0.1 a 100
        distances = physics.astrophysics.calculate_cosmological_distances(redshifts)

        # 2. Simular evolu√ß√£o qu√≠mica com condi√ß√µes cosmol√≥gicas
        print("üß™ Simulando evolu√ß√£o qu√≠mica em diferentes eras cosmol√≥gicas...")

        # Simular energias de liga√ß√£o molecular em diferentes redshifts
        # A energia qu√≠mica depende de constantes f√≠sicas que variam com o tempo
        base_binding_energy = -4.5  # eV para liga√ß√£o H-H (aproximado)

        # Fator de modifica√ß√£o baseado nas constantes din√¢micas
        # Em eras mais antigas, constantes eram diferentes
        time_factors = 1 / (1 + redshifts)  # Fator de dilata√ß√£o temporal
        chemical_evolution = base_binding_energy * (1 + 0.1 * np.sin(time_factors * 10))

        # 3. Analisar perfis de mat√©ria escura relacionados
        print("üåë Analisando perfis de mat√©ria escura...")
        radii = np.logspace(-3, 3, 100)  # Raios de 0.001 a 1000 kpc
        dm_profiles = physics.astrophysics.analyze_dark_matter_profiles(radii, 'NFW')

        # 4. Criar visualiza√ß√£o integrada
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))
        fig.suptitle('Demonstra√ß√£o Integrada: Astrof√≠sica + Qu√≠mica Qu√¢ntica', fontsize=16)

        # Gr√°fico 1: Dist√¢ncias cosmol√≥gicas
        ax1.loglog(redshifts, distances['luminosity_distance'], 'b-', linewidth=2)
        ax1.set_xlabel('Redshift (z)')
        ax1.set_ylabel(f'Dist√¢ncia Luminosa ({distances["units"]})')
        ax1.set_title('Evolu√ß√£o das Dist√¢ncias Cosmol√≥gicas')
        ax1.grid(True, alpha=0.3)

        # Gr√°fico 2: Evolu√ß√£o qu√≠mica com eras cosmol√≥gicas
        ax2.semilogx(redshifts, chemical_evolution, 'r-', linewidth=2, markersize=4)
        ax2.set_xlabel('Redshift (z)')
        ax2.set_ylabel('Energia de Liga√ß√£o (eV)')
        ax2.set_title('Evolu√ß√£o da Qu√≠mica Molecular')
        ax2.grid(True, alpha=0.3)

        # Gr√°fico 3: Perfil de mat√©ria escura
        ax3.loglog(dm_profiles['radii'], dm_profiles['density'], 'g-', linewidth=2)
        ax3.set_xlabel('Raio (kpc)')
        ax3.set_ylabel('Densidade (M‚äô/kpc¬≥)')
        ax3.set_title('Perfil de Mat√©ria Escura (NFW)')
        ax3.grid(True, alpha=0.3)

        # Gr√°fico 4: Correla√ß√£o qu√≠mica-mec√¢nica
        # Simular como qu√≠mica se relaciona com din√¢mica de mat√©ria escura
        chemical_correlation = chemical_evolution * (1 + 0.05 * np.random.randn(len(redshifts)))
        ax4.plot(distances['luminosity_distance'], chemical_correlation,
                'mo-', alpha=0.7, linewidth=2, markersize=4)
        ax4.set_xlabel(f'Dist√¢ncia Luminosa ({distances["units"]})')
        ax4.set_ylabel('Propriedades Qu√≠micas Modificadas')
        ax4.set_title('Correla√ß√£o Astrof√≠sica-Qu√≠mica')
        ax4.grid(True, alpha=0.3)

        plt.tight_layout()
        plt.savefig('resultados/integrated_astro_chemistry_demo.png', dpi=300, bbox_inches='tight')
        plt.close()

        print("‚úÖ Demonstra√ß√£o integrada conclu√≠da!")
        print("üìä Resultados salvos em: resultados/integrated_astro_chemistry_demo.png")

        return {
            'redshifts': redshifts,
            'distances': distances,
            'chemical_evolution': chemical_evolution,
            'dark_matter_profiles': dm_profiles
        }

    except Exception as e:
        print(f"‚ùå Erro na demonstra√ß√£o integrada: {e}")
        import traceback
        traceback.print_exc()
        return None


def main():
    """Executar todas as demonstra√ß√µes integradas"""
    print("üöÄ DEMONSTRA√á√ïES INTEGRADAS DO SISTEMA V3.0")
    print("Integra√ß√£o de M√≥dulos Especializados de F√≠sica")
    print("=" * 80)

    results = {}

    try:
        # Demonstra√ß√£o 1: Qu√≠mica Qu√¢ntica + Cosmologia
        results['quantum_cosmology'] = demo_quantum_chemistry_cosmology()

        # Demonstra√ß√£o 2: Mec√¢nica Qu√¢ntica + Gravita√ß√£o
        results['quantum_gravitational'] = demo_quantum_mechanics_gravitational()

        # Demonstra√ß√£o 3: Astrof√≠sica + Qu√≠mica Qu√¢ntica
        results['astro_chemistry'] = demo_astrophysical_chemistry()

        # Resumo dos resultados
        print("\n" + "=" * 80)
        print("üìä RESUMO DAS DEMONSTRA√á√ïES INTEGRADAS")
        print("=" * 80)

        successful_demos = sum(1 for result in results.values() if result is not None)
        total_demos = len(results)

        print(f"‚úÖ Demonstra√ß√µes bem-sucedidas: {successful_demos}/{total_demos}")

        for demo_name, demo_result in results.items():
            status_icon = "‚úÖ" if demo_result is not None else "‚ùå"
            demo_title = demo_name.replace('_', ' ').title()
            print(f"  {status_icon} {demo_title}")

        print("
üìÅ Arquivos gerados:"        print("  ‚Ä¢ resultados/integrated_quantum_cosmology_demo.png")
        print("  ‚Ä¢ resultados/integrated_quantum_gravitational_demo.png")
        print("  ‚Ä¢ resultados/integrated_astro_chemistry_demo.png")

        print("
üî¨ Interpreta√ß√£o dos Resultados:"        print("  ‚Ä¢ Demonstra√ß√£o 1: Como constantes din√¢micas afetam estrutura at√¥mica")
        print("  ‚Ä¢ Demonstra√ß√£o 2: Intera√ß√£o entre efeitos qu√¢nticos e gravitacionais")
        print("  ‚Ä¢ Demonstra√ß√£o 3: Evolu√ß√£o qu√≠mica em contexto cosmol√≥gico")

        print("
üéØ Conclus√µes:"        print("  ‚Ä¢ Integra√ß√£o bem-sucedida entre dom√≠nios f√≠sicos")
        print("  ‚Ä¢ Valida√ß√£o de abordagens multi-m√©todo")
        print("  ‚Ä¢ Base s√≥lida para pesquisas interdisciplinares")

    except Exception as e:
        print(f"‚ùå Erro nas demonstra√ß√µes integradas: {e}")
        import traceback
        traceback.print_exc()

    print("\n" + "=" * 80)
    print("üèÅ DEMONSTRA√á√ïES INTEGRADAS CONCLU√çDAS")
    print("=" * 80)


if __name__ == "__main__":
    main()
